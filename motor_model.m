function [F_motor,M_motor,rpm_motor_dot] = motor_model(F,M,motor_rpm,params)

% Input parameters
% 
%   F,M: required force and moment
%
%   motor_rpm: current motor RPM
%
%   params: Quadcopter parameters
%
% Output parameters
%
%   F_motor: Actual thrust generated by Quadcopter's Motors
%
%   M_motor: Actual Moment generated by the Quadcopter's Motors
%
%   rpm_dot: Derivative of the RPM
%
%************ MOTOR MODEL ************************

% Write code here
cT = params.thrust_coefficient;
cQ = params.moment_scale;
d = params.arm_length;
km = params.motor_constant;

prop_matrix = [
    cT, cT, cT, cT;
    0, d * cT, 0, -d * cT;
    -d * cT, 0, d * cT, 0;
    -cQ, cQ, -cQ, cQ;
    ];

rpm_des = sqrt(inv(prop_matrix) * [F;M]);

% motor rpm constraints
rpm_des(rpm_des > 20000) = 20000;
rpm_des(rpm_des < 3000) = 3000;

rpm_motor_dot = km * (rpm_des - motor_rpm);

%omega = 2 * pi * motor_rpm; 

motor = prop_matrix * (motor_rpm .* motor_rpm);
F_motor = motor(1);
M_motor = motor(2:4);

end
